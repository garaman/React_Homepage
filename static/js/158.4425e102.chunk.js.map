{"version":3,"file":"static/js/158.4425e102.chunk.js","mappings":"iKAGA,MA6DA,EA7DsBA,KACpB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,YAC5BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,6DAChCG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,IAC/BK,GAAUC,EAAAA,EAAAA,QAAO,MACjBC,GAAYD,EAAAA,EAAAA,QAAO,GACnBE,GAAUF,EAAAA,EAAAA,QAAO,GAEjBG,GAAgBC,EAAAA,EAAAA,aAAY,KAClB,YAAVZ,GACFO,EAAQM,QAAUC,WAChB,KACEb,EAAS,OACTG,EAAW,6BACXK,EAAUI,QAAU,IAAIE,MAE1BC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB,KAErCjB,EAAS,SACTG,EAAW,0EACQ,UAAVJ,GAETmB,aAAaZ,EAAQM,SACrBZ,EAAS,WACTG,EAAW,oIACQ,QAAVJ,IAETU,EAAQG,QAAU,IAAIE,KACtBd,EAAS,WACTG,EAAW,4DACXE,EAAWc,GACF,IAAIA,EAAYV,EAAQG,QAAUJ,EAAUI,YAGtD,CAACb,IAEEqB,GAAUT,EAAAA,EAAAA,aAAY,KAC1BN,EAAU,KACT,IAaH,OACEgB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,SAASH,UAAWvB,EAAO2B,QAAShB,EAAca,SACvDrB,IAboB,IAAlBE,EAAOuB,OAAe,MAC3BN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,8BAAQnB,EAAOwB,OAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAK1B,EAAOuB,OAAO,SAC5DH,EAAAA,EAAAA,KAAA,UAAQE,QAASN,EAASE,UAAU,wBAAuBC,SAAC,uB","sources":["components/responseCheck/ResponseCheck.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport './ResponseCheck.css';\n\nconst ResponseCheck = () => {\n  const [state, setState] = useState('waiting');\n  const [message, setMessage] = useState('클릭해서 시작하세요.');\n  const [result, setResult] = useState([]);\n  const timeout = useRef(null);\n  const startTime = useRef(0);\n  const endTime = useRef(0);\n\n  const onClickScreen = useCallback(() => {\n    if (state === 'waiting') {\n      timeout.current = setTimeout(\n        () => {\n          setState('now');\n          setMessage('지금 클릭');\n          startTime.current = new Date();\n        },\n        Math.floor(Math.random() * 1000) + 2000,\n      ); // 2초~3초 랜덤\n      setState('ready');\n      setMessage('초록색이 되면 클릭하세요.');\n    } else if (state === 'ready') {\n      // 성급하게 클릭\n      clearTimeout(timeout.current);\n      setState('waiting');\n      setMessage('너무 성급하시군요! 초록색이 된 후에 클릭하세요.');\n    } else if (state === 'now') {\n      // 반응속도 체크\n      endTime.current = new Date();\n      setState('waiting');\n      setMessage('클릭해서 시작하세요.');\n      setResult((prevResult) => {\n        return [...prevResult, endTime.current - startTime.current];\n      });\n    }\n  }, [state]);\n\n  const onReset = useCallback(() => {\n    setResult([]);\n  }, []);\n\n  const renderAverage = () => {\n    return result.length === 0 ? null : (\n      <div className=\"response-check-average\">\n        <div>평균 시간: {result.reduce((a, c) => a + c) / result.length}ms</div>\n        <button onClick={onReset} className=\"response-check-button\">\n          리셋\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"response-check-container\">\n      <div id=\"screen\" className={state} onClick={onClickScreen}>\n        {message}\n      </div>\n      {renderAverage()}\n    </div>\n  );\n};\n\nexport default ResponseCheck;\n"],"names":["ResponseCheck","state","setState","useState","message","setMessage","result","setResult","timeout","useRef","startTime","endTime","onClickScreen","useCallback","current","setTimeout","Date","Math","floor","random","clearTimeout","prevResult","onReset","_jsxs","className","children","_jsx","id","onClick","length","reduce","a","c"],"sourceRoot":""}