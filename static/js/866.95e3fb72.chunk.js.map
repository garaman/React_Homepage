{"version":3,"file":"static/js/866.95e3fb72.chunk.js","mappings":"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","sources":["components/tictectoe/Td.jsx","components/tictectoe/Tr.jsx","components/tictectoe/Table.jsx","components/tictectoe/TicTacToe.jsx"],"sourcesContent":["import React, { useCallback, memo } from 'react';\nimport { CLICK_CELL } from './TicTacToe';\n\nconst Td = memo(({ rowIndex, cellIndex, dispatch, cellData }) => {\n  const onClickTd = useCallback(() => {\n    console.log(`Td clicked: row=${rowIndex}, cell=${cellIndex}, cellData=${cellData}`);\n    if (cellData) {\n      return;\n    }\n    dispatch({ type: CLICK_CELL, row: rowIndex, cell: cellIndex });\n  }, [cellData, dispatch, rowIndex, cellIndex]);\n\n  return <td onClick={onClickTd}>{cellData}</td>;\n});\n\nexport default Td;\n","import React, { memo } from 'react';\nimport Td from './Td';\n\nconst Tr = memo(({ rowData, rowIndex, dispatch }) => {\n  console.log('tr rendered');\n  return (\n    <tr>\n      {Array(rowData.length)\n        .fill()\n        .map((td, i) => (\n          <Td\n            key={i}\n            dispatch={dispatch}\n            rowIndex={rowIndex}\n            cellIndex={i}\n            cellData={rowData[i]}\n          >\n            {''}\n          </Td>\n        ))}\n    </tr>\n  );\n});\n\nexport default Tr;\n","import React from 'react';\nimport Tr from './Tr';\n\nconst Table = ({ tableData, dispatch }) => {\n  return (\n    <table>\n      <tbody>\n        {Array(tableData.length)\n          .fill()\n          .map((tr, i) => (\n            <Tr\n              key={i}\n              dispatch={dispatch}\n              rowIndex={i}\n              rowData={tableData[i]}\n            />\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { useEffect, useReducer } from 'react';\nimport Table from './Table';\nimport './TicTacToe.css';\n\nconst initialState = {\n  winner: '',\n  turn: 'O',\n  tableData: [\n    ['', '', ''],\n    ['', '', ''],\n    ['', '', ''],\n  ],\n  recentCell: [-1, -1],\n  lastPlayer: '', // 마지막으로 수를 둔 플레이어를 저장할 새로운 상태 추가\n};\n\nexport const SET_WINNER = 'SET_WINNER';\nexport const CLICK_CELL = 'CLICK_CELL';\nexport const RESET_GAME = 'RESET_GAME';\n\nconst reducer = (state, action) => {\n  console.log('Reducer action:', action);\n  console.log('Reducer state before:', state);\n  switch (action.type) {\n    case SET_WINNER:\n      return {\n        ...state,\n        winner: action.winner,\n      };\n    case CLICK_CELL: {\n      const tableData = [...state.tableData];\n      tableData[action.row] = [...tableData[action.row]];\n      tableData[action.row][action.cell] = state.turn; // 현재 턴의 플레이어가 셀에 표시\n      return {\n        ...state,\n        tableData,\n        recentCell: [action.row, action.cell],\n        lastPlayer: state.turn, // 수를 둔 플레이어를 lastPlayer에 저장\n        turn: state.turn === 'O' ? 'X' : 'O', // 턴은 다음 플레이어로 변경\n      };\n    }\n    case RESET_GAME: {\n      return {\n        ...state,\n        winner: '',\n        turn: 'O',\n        tableData: [\n          ['', '', ''],\n          ['', '', ''],\n          ['', '', ''],\n        ],\n        recentCell: [-1, -1],\n        lastPlayer: '', // 게임 리셋 시 lastPlayer도 초기화\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst TicTacToe = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { tableData, turn, winner, recentCell, lastPlayer } = state; // lastPlayer 상태 추가\n\n  useEffect(() => {\n    console.log('useEffect triggered');\n    console.log('recentCell:', recentCell, 'tableData:', tableData, 'turn:', turn, 'lastPlayer:', lastPlayer);\n\n    const [row, cell] = recentCell;\n\n    // 게임 시작 시(-1, -1)에는 승리/무승부 검사를 하지 않음\n    if (row < 0) {\n      return;\n    }\n\n    // 승리 조건 검사\n    let win = false;\n    // 가로 승리\n    if (\n      tableData[row][0] === lastPlayer &&\n      tableData[row][1] === lastPlayer &&\n      tableData[row][2] === lastPlayer\n    ) {\n      win = true;\n    }\n    // 세로 승리\n    if (\n      tableData[0][cell] === lastPlayer &&\n      tableData[1][cell] === lastPlayer &&\n      tableData[2][cell] === lastPlayer\n    ) {\n      win = true;\n    }\n    // 대각선 승리 (왼쪽 상단에서 오른쪽 하단)\n    if (\n      tableData[0][0] === lastPlayer &&\n      tableData[1][1] === lastPlayer &&\n      tableData[2][2] === lastPlayer\n    ) {\n      win = true;\n    }\n    // 대각선 승리 (오른쪽 상단에서 왼쪽 하단)\n    if (\n      tableData[0][2] === lastPlayer &&\n      tableData[1][1] === lastPlayer &&\n      tableData[2][0] === lastPlayer\n    ) {\n      win = true;\n    }\n\n    if (win) {\n      // 승리 시\n      dispatch({ type: SET_WINNER, winner: lastPlayer }); // lastPlayer를 승자로 설정\n      setTimeout(() => {\n        dispatch({ type: RESET_GAME });\n      }, 2000);\n    } else {\n      // 승리하지 않았을 경우 무승부 검사\n      let allCellsFilled = true; // 모든 칸이 채워졌는지 여부\n      tableData.forEach((r) => { // row와 변수 이름 충돌을 피하기 위해 r로 변경\n        r.forEach((c) => { // cell과 변수 이름 충돌을 피하기 위해 c로 변경\n          if (!c) { // 칸이 비어있으면\n            allCellsFilled = false;\n          }\n        });\n      });\n\n      if (allCellsFilled) {\n        // 모든 칸이 채워졌고 승자가 없으면 무승부\n        dispatch({ type: SET_WINNER, winner: '무승부' }); // 무승부 메시지 설정 (null 대신 '무승부' 문자열 사용)\n        setTimeout(() => {\n          dispatch({ type: RESET_GAME });\n        }, 2000);\n      }\n    }\n  }, [recentCell, tableData, lastPlayer]); // lastPlayer를 의존성 배열에 추가\n\n  return (\n    <div className=\"tictactoe-container\">\n      <Table tableData={tableData} dispatch={dispatch} />\n      {winner && <div className=\"tictactoe-winner\">{winner === '무승부' ? '무승부입니다!' : `${winner}님의 승리!`}</div>}\n    </div>\n  );\n};\n\nexport default TicTacToe;"],"names":["memo","_ref","rowIndex","cellIndex","dispatch","cellData","onClickTd","useCallback","console","log","concat","type","CLICK_CELL","row","cell","_jsx","onClick","children","rowData","Array","length","fill","map","td","i","Td","tableData","tr","Tr","initialState","winner","turn","recentCell","lastPlayer","SET_WINNER","RESET_GAME","reducer","state","action","_objectSpread","TicTacToe","useReducer","useEffect","win","setTimeout","allCellsFilled","forEach","r","c","_jsxs","className","Table"],"sourceRoot":""}